#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
MAX_RECORDS_PER_TABLE = 50000  # 50k –∑–∞–ø–∏—Å–µ–π = ~1-2 –º–ª–Ω —è—á–µ–µ–∫ (–ø—Ä–∏ 20-40 –∫–æ–ª–æ–Ω–∫–∞—Ö)

def convert_table_name(sheet_name):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–∏—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name_mapping = {
        'wb_voronka': 'voronka_wb',
        'wb_detaliz': 'detaliz_wb', 
        'wb_price': 'price_wb',
        'wb_tovar': 'tovar_wb',
        'wb_sklad': 'stock_wb',
        'wb_priem': 'priem_wb',
        'wb_reklam': 'rekl_wb',
        'ozon_detaliz': 'detaliz',
        'ozon_reklam': 'stat_rk',
        'ozon_tovar': 'tovar',
        'ozon_price': 'prices',
        'ozon_voronka': 'voronka',
        'ozon_zakfbo': 'zakaz_fbo',
        'ozon_prodfbo': 'report_fbo',
        'ozon_zakfbs': 'zakaz_fbs',
        'ozon_prodfbs': 'report_fbs'
    }
    return name_mapping.get(sheet_name, sheet_name)

async def cleanup_and_sync():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
    
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É")
    print("=" * 70)
    print(f"üìä –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {MAX_RECORDS_PER_TABLE:,}")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_loader = ConfigLoader()
    config = config_loader.load_env_config()
    
    # –°–æ–∑–¥–∞–µ–º MySQL –∫–ª–∏–µ–Ω—Ç
    mysql_client = MySQLClient(
        host=config['mysql'].host,
        user=config['mysql'].user,
        password=config['mysql'].password,
        database=config['mysql'].database,
        port=config['mysql'].port
    )
    
    try:
        await mysql_client.create_pool(minsize=1, maxsize=2)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        admin_sheets_client = GoogleSheetsClient(
            credentials_file=config['google_sheets'].credentials_file,
            spreadsheet_id=config['google_sheets'].spreadsheet_id
        )
        await admin_sheets_client.authenticate()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "tech" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\nüìã –ß—Ç–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã 'tech'...")
        tech_data = await admin_sheets_client.get_sheet_data('tech')
        
        if len(tech_data) < 2:
            print("‚ùå –õ–∏—Å—Ç 'tech' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = tech_data[0]
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        clients = {}
        for row in tech_data[1:]:
            if len(row) >= 7:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω–∞—è
                client_id = row[0]  # –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
                table_id = row[1]   # ID —Ç–∞–±–ª–∏—Ü—ã
                table_name = row[2] # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                
                if client_id and table_id and table_name:
                    if client_id not in clients:
                        clients[client_id] = {
                            'table_id': table_id,
                            'tables': []
                        }
                    clients[client_id]['tables'].append(table_name)
        
        print(f"\nüë• –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü –≤ MySQL:")
        table_mapping = config_loader.load_table_mapping()
        table_sizes = {}
        
        for table_name, table_config in table_mapping['tables'].items():
            if table_config.get('enabled', False) and table_config.get('sync_direction') == "mysql_to_sheets":
                try:
                    count = await mysql_client.get_table_count(table_name)
                    table_sizes[table_name] = count
                    
                    if count > MAX_RECORDS_PER_TABLE:
                        print(f"   üî¥ {table_name}: {count:,} ‚Üí –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {MAX_RECORDS_PER_TABLE:,} (–ü–û–°–õ–ï–î–ù–ò–ï)")
                    else:
                        print(f"   üü¢ {table_name}: {count:,} ‚Üí –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {count:,} (–í–°–ï)")
                        
                except Exception as e:
                    print(f"   ‚ùå {table_name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ - {e}")
                    table_sizes[table_name] = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        total_synced = 0
        for client_id, client_data in clients.items():
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_id}...")
            print(f"   üìã –¢–∞–±–ª–∏—Ü –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {len(client_data['tables'])}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
            client_sheets = GoogleSheetsClient(
                credentials_file=config['google_sheets'].credentials_file,
                spreadsheet_id=client_data['table_id']
            )
            await client_sheets.authenticate()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
            print(f"   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏—Å—Ç–æ–≤...")
            sheet_info = await client_sheets.get_sheet_info()
            existing_sheets = []
            total_cells_used = 0
            
            for sheet in sheet_info.get('sheets', []):
                sheet_name = sheet['properties']['title']
                grid_props = sheet['properties']['gridProperties']
                rows = grid_props.get('rowCount', 0)
                cols = grid_props.get('columnCount', 0)
                cells = rows * cols
                total_cells_used += cells
                existing_sheets.append({
                    'name': sheet_name,
                    'rows': rows,
                    'cols': cols,
                    'cells': cells
                })
            
            print(f"   üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã: {len(existing_sheets)}")
            print(f"   üìä –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —è—á–µ–µ–∫: {total_cells_used:,} / 10,000,000")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–∏—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            sheets_to_sync = set()
            for table_name in client_data['tables']:
                sheets_to_sync.add(table_name)
            
            print(f"   üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
            for sheet in existing_sheets:
                if sheet['name'] in sheets_to_sync:
                    try:
                        await client_sheets.delete_sheet(sheet['name'])
                        print(f"      ‚úÖ –£–¥–∞–ª–µ–Ω –ª–∏—Å—Ç: {sheet['name']} ({sheet['cells']:,} —è—á–µ–µ–∫)")
                        total_cells_used -= sheet['cells']
                    except Exception as e:
                        print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–∏—Å—Ç {sheet['name']}: {e}")
            
            print(f"   üìä –Ø—á–µ–µ–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {total_cells_used:,} / 10,000,000")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
            client_synced = 0
            for table_name in client_data['tables']:
                print(f"   üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
                config_table_name = convert_table_name(table_name)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã
                table_config = config_loader.get_table_config(config_table_name)
                if not table_config:
                    print(f"      ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è '{config_table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    total_records = table_sizes.get(config_table_name, 0)
                    if total_records == 0:
                        print(f"      üìù –¢–∞–±–ª–∏—Ü–∞ {config_table_name} –ø—É—Å—Ç–∞")
                        continue
                    
                    records_to_sync = min(total_records, MAX_RECORDS_PER_TABLE)
                    print(f"      üìä –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {records_to_sync:,} –∏–∑ {total_records:,} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
                    if not await client_sheets.sheet_exists(table_name):
                        await client_sheets.create_sheet(table_name)
                        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: {table_name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
                    mysql_data = await get_limited_data(mysql_client, config_table_name, table_config, records_to_sync)
                    
                    if mysql_data:
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        await client_sheets.append_sheet_data(table_name, mysql_data)
                        synced_count = len(mysql_data)
                        client_synced += synced_count
                        total_synced += synced_count
                        print(f"      ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count:,} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ tech
                        await update_tech_status(admin_sheets_client, client_id, table_name, True)
                    else:
                        print(f"      ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                        
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {table_name}: {e}")
            
            print(f"   ‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id}: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {client_synced:,} –∑–∞–ø–∏—Å–µ–π")
        
        print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_synced:,}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await mysql_client.close_pool()

async def get_limited_data(mysql_client, table_name, table_config, max_records):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MySQL (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        fields = list(table_config.fields.keys())
        primary_key = table_config.primary_key
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
        query = f"""
        SELECT {', '.join(fields)}
        FROM `{table_name}`
        ORDER BY `{primary_key}` DESC
        LIMIT {max_records}
        """
        
        print(f"         üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {max_records:,} –∑–∞–ø–∏—Å–µ–π...")
        rows = await mysql_client.fetch_all(query)
        
        if not rows:
            return []
        
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (—Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å–≤–µ—Ä—Ö—É)
        rows = list(reversed(rows))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Google Sheets
        sheet_data = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [table_config.fields.get(field, field) for field in fields]
        sheet_data.append(headers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in rows:
            sheet_row = []
            for field in fields:
                value = row.get(field, '')
                if value is None:
                    value = ''
                sheet_row.append(str(value))
            sheet_data.append(sheet_row)
        
        print(f"         üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(sheet_data):,} —Å—Ç—Ä–æ–∫ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)")
        return sheet_data
        
    except Exception as e:
        print(f"         ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {e}")
        return []

async def update_tech_status(sheets_client, client_id, table_name, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—Å—Ç–µ tech"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        tech_data = await sheets_client.get_sheet_data('tech')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for i, row in enumerate(tech_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(row) >= 7 and row[0] == client_id and row[2] == table_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–í—ã–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã"
                range_name = f"G{i}"  # –ö–æ–ª–æ–Ω–∫–∞ G (7-—è –∫–æ–ª–æ–Ω–∫–∞)
                await sheets_client.update_sheet_data('tech', range_name, [[str(status)]])
                print(f"      üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç–µ 'tech'")
                break
    except Exception as e:
        print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

if __name__ == "__main__":
    asyncio.run(cleanup_and_sync())

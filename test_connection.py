#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL –∏ Google Sheets
–ó–∞–ø—É—Å–∫: python test_connection.py
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader

async def test_mysql_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_loader = ConfigLoader()
        env_config = config_loader.load_env_config()
        mysql_config = env_config['mysql']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        mysql_client = MySQLClient(
            host=mysql_config.host,
            user=mysql_config.user,
            password=mysql_config.password,
            database=mysql_config.database,
            port=mysql_config.port
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await mysql_client.create_pool(minsize=1, maxsize=2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        result = await mysql_client.fetch_one("SELECT 1 as test, NOW() as server_time")
        print(f"‚úÖ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º—è: {result['server_time']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_query = """
        SELECT TABLE_NAME, TABLE_ROWS 
        FROM information_schema.tables 
        WHERE table_schema = %s 
        AND TABLE_NAME IN ('tovar', 'tovar_wb', 'voronka_wb', 'detaliz_wb', 'change_log')
        ORDER BY TABLE_NAME
        """
        tables = await mysql_client.fetch_all(tables_query, (mysql_config.database,))
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in tables:
            print(f"   - {table['TABLE_NAME']}: {table['TABLE_ROWS']} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º change_log
        if any(t['TABLE_NAME'] == 'change_log' for t in tables):
            change_count = await mysql_client.fetch_one(
                "SELECT COUNT(*) as count FROM change_log WHERE status = 'PENDING'"
            )
            print(f"üìã change_log: {change_count['count']} –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        else:
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ change_log –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ scripts/setup_mysql.sh")
        
        await mysql_client.close_pool()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ MySQL: {e}")
        return False

async def test_google_sheets_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_loader = ConfigLoader()
        env_config = config_loader.load_env_config()
        sheets_config = env_config['google_sheets']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª credentials
        if not Path(sheets_config.credentials_file).exists():
            print(f"‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {sheets_config.credentials_file}")
            print("   –ü–æ–º–µ—Å—Ç–∏—Ç–µ google.json –≤ –ø–∞–ø–∫—É credentials/")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        sheets_client = GoogleSheetsClient(
            credentials_file=sheets_config.credentials_file,
            spreadsheet_id=sheets_config.spreadsheet_id
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        await sheets_client.authenticate()
        print("‚úÖ Google Sheets –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        sheet_info = await sheets_client.get_sheet_info()
        title = sheet_info['properties']['title']
        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: '{title}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã
        sheets = sheet_info.get('sheets', [])
        sheet_names = [sheet['properties']['title'] for sheet in sheets]
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã ({len(sheet_names)}):")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –ª–∏—Å—Ç–æ–≤
        required_sheets = ['tech', 'list', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2']
        for sheet_name in required_sheets:
            if sheet_name in sheet_names:
                print(f"   ‚úÖ {sheet_name}")
            else:
                print(f"   ‚ùå {sheet_name} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        data_sheets = [name for name in sheet_names if name.startswith(('wb_', 'ozon_'))]
        if data_sheets:
            print(f"üìà –õ–∏—Å—Ç—ã –¥–∞–Ω–Ω—ã—Ö ({len(data_sheets)}):")
            for sheet_name in data_sheets[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {sheet_name}")
            if len(data_sheets) > 5:
                print(f"   ... –∏ –µ—â–µ {len(data_sheets) - 5}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ tech
        if 'tech' in sheet_names:
            tech_data = await sheets_client.get_sheet_data('tech')
            if tech_data and len(tech_data) > 1:
                print(f"üìã –õ–∏—Å—Ç 'tech': {len(tech_data)-1} –∑–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = tech_data[0] if tech_data else []
                if headers:
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers[:3])}...")
            else:
                print("‚ö†Ô∏è  –õ–∏—Å—Ç 'tech' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
        return False

async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        config_loader = ConfigLoader()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        is_valid = config_loader.validate_config()
        if is_valid:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        enabled_tables = config_loader.get_enabled_tables()
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {len(enabled_tables)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
        wb_tables = [name for name in enabled_tables.keys() if name.endswith('_wb') or 'wb' in name]
        ozon_tables = [name for name in enabled_tables.keys() if not name.endswith('_wb') and 'wb' not in name]
        
        print(f"   üü¢ WB —Ç–∞–±–ª–∏—Ü: {len(wb_tables)}")
        print(f"   üîµ OZON —Ç–∞–±–ª–∏—Ü: {len(ozon_tables)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        for name, config in list(enabled_tables.items())[:3]:
            print(f"   - {name} ‚Üí '{config.sheet_name}' ({config.sync_direction})")
        
        if len(enabled_tables) > 3:
            print(f"   ... –∏ –µ—â–µ {len(enabled_tables) - 3}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ MySQL ‚Üî Google Sheets")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    config_file = Path("config.env")
    if config_file.exists():
        print("‚úÖ –§–∞–π–ª config.env –Ω–∞–π–¥–µ–Ω")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        with open(config_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º config.env.example")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("MySQL", test_mysql_connection),
        ("Google Sheets", test_google_sheets_connection),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            passed += 1
        else:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê")
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: ./scripts/start.sh")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: http://localhost:8000/health")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã.")
        print("\nüìö –°–ø—Ä–∞–≤–∫–∞:")
        print("- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google API: docs/google_setup.md")
        print("- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MySQL: ./scripts/setup_mysql.sh")
        print("- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.env")
    
    return passed == len(results)

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Google Sheets –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader

# –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
LARGE_TABLE_THRESHOLD = 100000  # 100k –∑–∞–ø–∏—Å–µ–π

async def create_separate_sheets_for_large_tables():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ Google Sheets –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü"""
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Google Sheets –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü...")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_loader = ConfigLoader()
    config = config_loader.load_env_config()
    table_mapping = config_loader.load_table_mapping()
    table_configs = table_mapping['tables']
    
    # –°–æ–∑–¥–∞–µ–º MySQL –∫–ª–∏–µ–Ω—Ç
    mysql_client = MySQLClient(
        host=config['mysql'].host,
        user=config['mysql'].user,
        password=config['mysql'].password,
        database=config['mysql'].database,
        port=config['mysql'].port
    )
    
    # –°–æ–∑–¥–∞–µ–º Google Sheets –∫–ª–∏–µ–Ω—Ç
    sheets_client = GoogleSheetsClient(
        credentials_file=config['google_sheets'].credentials_file,
        spreadsheet_id=config['google_sheets'].spreadsheet_id
    )
    
    try:
        await mysql_client.create_pool(minsize=1, maxsize=2)
        await sheets_client.authenticate()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        large_tables = []
        
        for table_name, table_config in table_configs.items():
            if table_config.get('enabled', False) and table_config.get('sync_direction') == "mysql_to_sheets":
                try:
                    count = await mysql_client.get_table_count(table_name)
                    print(f"üìã {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π", end="")
                    
                    if count > LARGE_TABLE_THRESHOLD:
                        print(" üî¥ –ë–û–õ–¨–®–ê–Ø –¢–ê–ë–õ–ò–¶–ê - —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—É—é Google Sheets")
                        large_tables.append({
                            'mysql_name': table_name,
                            'sheet_name': table_config.get('sheet_name', table_name),
                            'count': count,
                            'config': table_config
                        })
                    else:
                        print(" üü¢ –º–∞–ª–∞—è —Ç–∞–±–ª–∏—Ü–∞ - –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞: {e}")
        
        if not large_tables:
            print("\nüéâ –ë–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã.")
            return
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü: {len(large_tables)}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ Google Sheets –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
        created_sheets = {}
        
        for table_info in large_tables:
            table_name = table_info['mysql_name']
            sheet_name = table_info['sheet_name']
            count = table_info['count']
            
            print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π Google Sheets –¥–ª—è '{table_name}' ({count:,} –∑–∞–ø–∏—Å–µ–π)...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é Google Sheets
                new_spreadsheet = await create_new_spreadsheet(sheets_client, f"BigData_{sheet_name}")
                
                if new_spreadsheet:
                    spreadsheet_id = new_spreadsheet['spreadsheetId']
                    created_sheets[table_name] = {
                        'spreadsheet_id': spreadsheet_id,
                        'sheet_name': sheet_name,
                        'url': f"https://docs.google.com/spreadsheets/d/{spreadsheet_id}",
                        'count': count
                    }
                    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ Google Sheets: {spreadsheet_id}")
                    print(f"   üîó URL: https://docs.google.com/spreadsheets/d/{spreadsheet_id}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google Sheets –¥–ª—è {table_name}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        if created_sheets:
            await save_large_tables_config(created_sheets)
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_sheets)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Google Sheets!")
            print("\nüìã –°–û–ó–î–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´:")
            for table_name, info in created_sheets.items():
                print(f"   üìä {table_name} ‚Üí {info['spreadsheet_id']} ({info['count']:,} –∑–∞–ø–∏—Å–µ–π)")
                print(f"      üîó {info['url']}")
            
            print(f"\nüìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ: large_tables_mapping.json")
            print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –æ—Ç–¥–µ–ª—å–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await mysql_client.close_pool()

async def create_new_spreadsheet(sheets_client, title):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google Sheets —Ç–∞–±–ª–∏—Ü—É"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Drive API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        body = {
            'properties': {
                'title': title
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ Sheets API
        response = await sheets_client._make_request(
            sheets_client.service.spreadsheets().create,
            body=body
        )
        
        return response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {title}: {e}")
        return None

async def save_large_tables_config(created_sheets):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ —Ñ–∞–π–ª"""
    import json
    
    config_file = "/Users/alex/Downloads/Work/–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞/–ë–æ—Ç/large_tables_mapping.json"
    
    with open(config_file, 'w', encoding='utf-8') as f:
        json.dump(created_sheets, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_file}")

if __name__ == "__main__":
    asyncio.run(create_separate_sheets_for_large_tables())

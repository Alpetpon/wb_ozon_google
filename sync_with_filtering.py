#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1 –º–ª–Ω –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader
from sync_service.sync.mysql_to_sheets import MySQLToSheetsSync

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
LARGE_TABLE_THRESHOLD = 100000  # 100k –∑–∞–ø–∏—Å–µ–π
MAX_RECORDS_FOR_LARGE_TABLES = 1000000  # 1 –º–ª–Ω –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü

def convert_table_name(sheet_name):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–∏—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    name_mapping = {
        'wb_voronka': 'voronka_wb',
        'wb_detaliz': 'detaliz_wb', 
        'wb_price': 'price_wb',
        'wb_tovar': 'tovar_wb',
        'wb_sklad': 'stock_wb',
        'wb_priem': 'priem_wb',
        'wb_reklam': 'rekl_wb',
        'ozon_detaliz': 'detaliz',
        'ozon_reklam': 'stat_rk',
        'ozon_tovar': 'tovar',
        'ozon_price': 'prices',
        'ozon_voronka': 'voronka',
        'ozon_zakfbo': 'zakaz_fbo',
        'ozon_prodfbo': 'report_fbo',
        'ozon_zakfbs': 'zakaz_fbs',
        'ozon_prodfbs': 'report_fbs'
    }
    return name_mapping.get(sheet_name, sheet_name)

async def sync_with_filtering():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü"""
    
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (1 –º–ª–Ω –∑–∞–ø–∏—Å–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü)")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_loader = ConfigLoader()
    config = config_loader.load_env_config()
    
    # –°–æ–∑–¥–∞–µ–º MySQL –∫–ª–∏–µ–Ω—Ç
    mysql_client = MySQLClient(
        host=config['mysql'].host,
        user=config['mysql'].user,
        password=config['mysql'].password,
        database=config['mysql'].database,
        port=config['mysql'].port
    )
    
    try:
        await mysql_client.create_pool(minsize=1, maxsize=2)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        admin_sheets_client = GoogleSheetsClient(
            credentials_file=config['google_sheets'].credentials_file,
            spreadsheet_id=config['google_sheets'].spreadsheet_id
        )
        await admin_sheets_client.authenticate()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "tech" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\nüìã –ß—Ç–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã 'tech'...")
        tech_data = await admin_sheets_client.get_sheet_data('tech')
        
        if len(tech_data) < 2:
            print("‚ùå –õ–∏—Å—Ç 'tech' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = tech_data[0]
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        clients = {}
        for row in tech_data[1:]:
            if len(row) >= 7:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–æ–ª–Ω–∞—è
                client_id = row[0]  # –ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
                table_id = row[1]   # ID —Ç–∞–±–ª–∏—Ü—ã
                table_name = row[2] # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                start_date = row[3] # –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
                end_date = row[4]   # –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
                loaded_to_db = row[5] # –í—ã–≥—Ä—É–∂–µ–Ω–æ –≤ –±–∞–∑—É
                loaded_from_db = row[6] # –í—ã–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã
                
                if client_id and table_id and table_name:
                    if client_id not in clients:
                        clients[client_id] = {
                            'table_id': table_id,
                            'tables': []
                        }
                    clients[client_id]['tables'].append({
                        'name': table_name,
                        'start_date': start_date,
                        'end_date': end_date,
                        'loaded_to_db': loaded_to_db,
                        'loaded_from_db': loaded_from_db
                    })
        
        print(f"\nüë• –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
        for client_id, client_data in clients.items():
            print(f"   üìä –ö–ª–∏–µ–Ω—Ç {client_id}: {len(client_data['tables'])} —Ç–∞–±–ª–∏—Ü ‚Üí {client_data['table_id']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–∞–±–ª–∏—Ü:")
        table_sizes = {}
        table_mapping = config_loader.load_table_mapping()
        
        for table_name, table_config in table_mapping['tables'].items():
            if table_config.get('enabled', False) and table_config.get('sync_direction') == "mysql_to_sheets":
                try:
                    count = await mysql_client.get_table_count(table_name)
                    table_sizes[table_name] = count
                    
                    if count > LARGE_TABLE_THRESHOLD:
                        limited_count = min(count, MAX_RECORDS_FOR_LARGE_TABLES)
                        print(f"   üî¥ {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π ‚Üí –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {limited_count:,} (–§–ò–õ–¨–¢–†)")
                    else:
                        print(f"   üü¢ {table_name}: {count:,} –∑–∞–ø–∏—Å–µ–π ‚Üí –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {count:,} (–í–°–ï)")
                        
                except Exception as e:
                    print(f"   ‚ùå {table_name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ - {e}")
                    table_sizes[table_name] = 0
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        total_synced = 0
        for client_id, client_data in clients.items():
            print(f"\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
            client_sheets = GoogleSheetsClient(
                credentials_file=config['google_sheets'].credentials_file,
                spreadsheet_id=client_data['table_id']
            )
            await client_sheets.authenticate()
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            sync = FilteredMySQLToSheetsSync(mysql_client, client_sheets, config['sync'])
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –∫–ª–∏–µ–Ω—Ç–∞
            for table_info in client_data['tables']:
                table_name = table_info['name']
                print(f"   üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
                config_table_name = convert_table_name(table_name)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã
                table_config = config_loader.get_table_config(config_table_name)
                if not table_config:
                    print(f"      ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è '{config_table_name}' (–∏–∑ '{table_name}') –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    total_records = table_sizes.get(config_table_name, 0)
                    use_filtering = total_records > LARGE_TABLE_THRESHOLD
                    
                    if use_filtering:
                        max_records = MAX_RECORDS_FOR_LARGE_TABLES
                        print(f"      üîç –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_records:,} –∏–∑ {total_records:,} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        max_records = None
                        print(f"      üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Å–µ {total_records:,} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                    result = await sync.sync_table_with_filter(
                        config_table_name, 
                        table_config, 
                        max_records=max_records
                    )
                    
                    if result.get('status') == 'completed':
                        synced_count = result.get('synced', 0)
                        total_synced += synced_count
                        print(f"      ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count:,} –∑–∞–ø–∏—Å–µ–π")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—Å—Ç–µ "tech"
                        await update_tech_status(admin_sheets_client, client_id, table_name, True)
                    else:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
                        
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_synced:,}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await mysql_client.close_pool()

class FilteredMySQLToSheetsSync(MySQLToSheetsSync):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    async def sync_table_with_filter(self, table_name: str, table_config, max_records=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π"""
        try:
            print(f"      üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {table_name}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if table_config.sync_direction not in ['both', 'mysql_to_sheets']:
                return {"status": "skipped", "reason": "sync_direction"}
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total_count = await self.mysql_client.get_table_count(table_name)
            if total_count == 0:
                print(f"      üìù –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞")
                await self._clear_sheet_if_needed(table_config.sheet_name)
                return {"status": "completed", "synced": 0, "total": 0}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if max_records and total_count > max_records:
                records_to_sync = max_records
                print(f"      üîç –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω: {records_to_sync:,} –∏–∑ {total_count:,} –∑–∞–ø–∏—Å–µ–π")
            else:
                records_to_sync = total_count
                print(f"      üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –≤—Å–µ {records_to_sync:,} –∑–∞–ø–∏—Å–µ–π")
            
            # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            try:
                await self.sheets_client.clear_sheet_data(table_config.sheet_name)
                print(f"      üßπ –õ–∏—Å—Ç {table_config.sheet_name} –æ—á–∏—â–µ–Ω")
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
            mysql_data = await self._get_filtered_data(table_name, table_config, records_to_sync)
            
            if not mysql_data:
                print(f"      ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return {"status": "completed", "synced": 0, "total": total_count}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Google Sheets
            sheet_data = self._convert_to_sheet_format(mysql_data, table_config)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets –±–∞—Ç—á–∞–º–∏
            batch_size = min(table_config.batch_size, 1000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            synced_records = 0
            
            for i in range(0, len(sheet_data), batch_size):
                batch = sheet_data[i:i + batch_size]
                try:
                    await self.sheets_client.append_sheet_data(table_config.sheet_name, batch)
                    synced_records += len(batch)
                    print(f"      üìù –ó–∞–ø–∏—Å–∞–Ω–æ {synced_records:,}/{len(sheet_data):,} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –±–∞—Ç—á–∞: {e}")
                    break
            
            print(f"      ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {table_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {synced_records:,} –∑–∞–ø–∏—Å–µ–π")
            return {"status": "completed", "synced": synced_records, "total": total_count}
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {table_name}: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _get_filtered_data(self, table_name: str, table_config, max_records: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
            fields = list(table_config.fields.keys())
            primary_key = table_config.primary_key
            
            # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            query = f"""
            SELECT {', '.join(fields)}
            FROM `{table_name}`
            ORDER BY `{primary_key}` DESC
            LIMIT {max_records}
            """
            
            print(f"      üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {max_records:,} –∑–∞–ø–∏—Å–µ–π...")
            rows = await self.mysql_client.fetch_all(query)
            
            if rows:
                print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ {len(rows):,} –∑–∞–ø–∏—Å–µ–π –∏–∑ MySQL")
                # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É –≤ Google Sheets
                return list(reversed(rows))
            else:
                print(f"      ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
                return []
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {e}")
            return []
    
    def _convert_to_sheet_format(self, mysql_data, table_config):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ MySQL –≤ —Ñ–æ—Ä–º–∞—Ç Google Sheets"""
        if not mysql_data:
            return []
        
        sheet_data = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [table_config.fields.get(field, field) for field in table_config.fields.keys()]
        sheet_data.append(headers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in mysql_data:
            sheet_row = []
            for field in table_config.fields.keys():
                value = row.get(field, '')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                if value is None:
                    value = ''
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets
                sheet_row.append(str(value))
            sheet_data.append(sheet_row)
        
        return sheet_data

async def update_tech_status(sheets_client, client_id, table_name, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ª–∏—Å—Ç–µ tech"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        tech_data = await sheets_client.get_sheet_data('tech')
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for i, row in enumerate(tech_data[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if len(row) >= 7 and row[0] == client_id and row[2] == table_name:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–í—ã–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã"
                range_name = f"G{i}"  # –ö–æ–ª–æ–Ω–∫–∞ G (7-—è –∫–æ–ª–æ–Ω–∫–∞)
                await sheets_client.update_sheet_data('tech', range_name, [[str(status)]])
                print(f"      üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç–µ 'tech'")
                break
    except Exception as e:
        print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")

if __name__ == "__main__":
    asyncio.run(sync_with_filtering())

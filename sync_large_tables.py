#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏
"""

import asyncio
import sys
import os
import math

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sync_service.clients.mysql_client import MySQLClient
from sync_service.clients.sheets_client import GoogleSheetsClient
from sync_service.config.config_loader import ConfigLoader

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç (500K —Å—Ç—Ä–æ–∫ = ~10 –º–ª–Ω —è—á–µ–µ–∫ –ø—Ä–∏ 20 –∫–æ–ª–æ–Ω–∫–∞—Ö)
MAX_ROWS_PER_SHEET = 500000

async def sync_large_tables():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏"""
    
    print("üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏...")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_loader = ConfigLoader()
    config = config_loader.load_env_config()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
    admin_sheets_client = GoogleSheetsClient(
        credentials_file=config['google_sheets'].credentials_file,
        spreadsheet_id=config['google_sheets'].spreadsheet_id
    )
    await admin_sheets_client.authenticate()
    
    # –°–æ–∑–¥–∞–µ–º MySQL –∫–ª–∏–µ–Ω—Ç
    mysql_client = MySQLClient(
        host=config['mysql'].host,
        user=config['mysql'].user,
        password=config['mysql'].password,
        database=config['mysql'].database,
        port=config['mysql'].port
    )
    
    try:
        await mysql_client.create_pool(minsize=1, maxsize=2)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç "tech" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\nüìã –ß—Ç–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã 'tech'...")
        tech_data = await admin_sheets_client.get_sheet_data('tech')
        
        if len(tech_data) < 2:
            print("‚ùå –õ–∏—Å—Ç 'tech' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = tech_data[0]
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
        
        # –ë–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
        large_tables_info = {
            'detaliz_wb': 'wb_detaliz',
            'detaliz': 'ozon_detaliz', 
            'prices': 'ozon_price',
            'voronka': 'ozon_voronka',
            'zakaz_fbo': 'ozon_zakfbo',
            'report_fbo': 'ozon_prodfbo'
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        clients = {}
        for row in tech_data[1:]:
            if len(row) >= 7:
                client_id = row[0]
                table_id = row[1]
                table_name = row[2]
                
                if client_id and table_id and table_name in large_tables_info.values():
                    if client_id not in clients:
                        clients[client_id] = {
                            'table_id': table_id,
                            'large_tables': []
                        }
                    
                    # –ù–∞—Ö–æ–¥–∏–º MySQL –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
                    mysql_table = None
                    for mysql_name, sheet_name in large_tables_info.items():
                        if sheet_name == table_name:
                            mysql_table = mysql_name
                            break
                    
                    if mysql_table:
                        clients[client_id]['large_tables'].append({
                            'mysql_name': mysql_table,
                            'sheet_name': table_name
                        })
        
        print(f"\nüë• –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏: {len(clients)}")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        total_synced = 0
        for client_id, client_data in clients.items():
            if not client_data['large_tables']:
                continue
                
            print(f"\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –∫–ª–∏–µ–Ω—Ç–∞ {client_id}...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Google Sheets –∫–ª–∏–µ–Ω—Ç–∞
            client_sheets = GoogleSheetsClient(
                credentials_file=config['google_sheets'].credentials_file,
                spreadsheet_id=client_data['table_id']
            )
            await client_sheets.authenticate()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –±–æ–ª—å—à—É—é —Ç–∞–±–ª–∏—Ü—É
            for table_info in client_data['large_tables']:
                mysql_table = table_info['mysql_name'] 
                sheet_name = table_info['sheet_name']
                
                print(f"   üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–æ–π —Ç–∞–±–ª–∏—Ü—ã '{mysql_table}' ‚Üí '{sheet_name}'...")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    total_count = await mysql_client.get_table_count(mysql_table)
                    print(f"      üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
                    
                    if total_count == 0:
                        print(f"      ‚è≠Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {mysql_table} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
                    parts_needed = math.ceil(total_count / MAX_ROWS_PER_SHEET)
                    print(f"      üìÑ –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å {parts_needed} —á–∞—Å—Ç–µ–π")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü—ã
                    table_mapping = config_loader.load_table_mapping()
                    table_config = table_mapping['tables'].get(mysql_table)
                    
                    if not table_config:
                        print(f"      ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è '{mysql_table}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        continue
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
                    synced_count = 0
                    for part_num in range(1, parts_needed + 1):
                        offset = (part_num - 1) * MAX_ROWS_PER_SHEET
                        limit = min(MAX_ROWS_PER_SHEET, total_count - offset)
                        
                        part_sheet_name = f"{sheet_name}_part{part_num}"
                        print(f"      üîÑ –ß–∞—Å—Ç—å {part_num}/{parts_needed}: {part_sheet_name} ({limit:,} –∑–∞–ø–∏—Å–µ–π)")
                        
                        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                        if not await client_sheets.sheet_exists(part_sheet_name):
                            try:
                                await client_sheets.create_sheet(part_sheet_name)
                                print(f"         ‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: {part_sheet_name}")
                            except Exception as e:
                                print(f"         ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞: {e}")
                                continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL
                        mysql_data = await get_table_data_with_pagination(
                            mysql_client, mysql_table, table_config, offset, limit
                        )
                        
                        if mysql_data:
                            # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                            try:
                                await client_sheets.clear_sheet_data(part_sheet_name)
                            except:
                                pass  # –õ–∏—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            try:
                                await client_sheets.append_sheet_data(part_sheet_name, mysql_data)
                                synced_count += len(mysql_data)
                                print(f"         ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(mysql_data):,} –∑–∞–ø–∏—Å–µ–π")
                            except Exception as e:
                                print(f"         ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç: {e}")
                        else:
                            print(f"         ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    
                    total_synced += synced_count
                    print(f"      ‚úÖ –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {mysql_table}: {synced_count:,} –∑–∞–ø–∏—Å–µ–π")
                    
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {mysql_table}: {e}")
        
        print(f"\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_synced:,}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await mysql_client.close_pool()

async def get_table_data_with_pagination(mysql_client, table_name, table_config, offset, limit):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MySQL —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        fields = list(table_config.get('fields', {}).keys())
        if not fields:
            fields = ['*']
        
        query = f"""
        SELECT {', '.join(fields)}
        FROM `{table_name}`
        ORDER BY {table_config.get('primary_key', 'id')}
        LIMIT {limit} OFFSET {offset}
        """
        
        rows = await mysql_client.fetch_all(query)
        
        if not rows:
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Google Sheets
        sheet_data = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏)
        if offset == 0:
            headers = [table_config['fields'].get(field, field) for field in fields]
            sheet_data.append(headers)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in rows:
            sheet_row = []
            for field in fields:
                value = row.get(field, '')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                if value is None:
                    value = ''
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets
                sheet_row.append(str(value))
            sheet_data.append(sheet_row)
        
        return sheet_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {e}")
        return []

if __name__ == "__main__":
    asyncio.run(sync_large_tables())
